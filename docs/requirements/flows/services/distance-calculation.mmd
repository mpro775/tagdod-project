%% Distance Calculation Flow
%% View at https://mermaid.live
flowchart TD
  A[حساب المسافات] --> B[معادلة Haversine]
  B --> B1[نقطة البداية: lat1, lng1]
  B1 --> B2[نقطة النهاية: lat2, lng2]
  B2 --> B3[تحويل إلى راديان]
  B3 --> B4[حساب الفرق في الإحداثيات]
  B4 --> B5[تطبيق المعادلة الرياضية]
  B5 --> B6[حساب المسافة بالكيلومتر]

  A --> C[البحث الجغرافي في MongoDB]
  C --> C1[فهرس 2dsphere]
  C1 --> C2[$near operator]
  C2 --> C3[نطاق البحث بالكيلومتر]
  C3 --> C4[فلترة النتائج]
  C4 --> C5[ترتيب حسب المسافة]

  %% Haversine Formula Details
  D[تفاصيل معادلة Haversine] --> D1[R = نصف قطر الأرض = 6371 كم]
  D1 --> D2[Δlat = lat2 - lat1]
  D2 --> D3[Δlng = lng2 - lng1]
  D3 --> D4[a = sin²(Δlat/2) + cos(lat1) * cos(lat2) * sin²(Δlng/2)]
  D4 --> D5[c = 2 * atan2(sqrt(a), sqrt(1-a))]
  D5 --> D6[distance = R * c]

  %% MongoDB Geo Queries
  E[استعلامات MongoDB الجغرافية] --> E1[ServiceRequestSchema.index location: 2dsphere]
  E1 --> E2[db.service_requests.find]
  E2 --> E3[$near: [lng, lat]]
  E3 --> E4[$maxDistance: distance_in_meters]
  E4 --> E5[limit: عدد النتائج]

  %% Use Cases
  F[حالات الاستخدام] --> F1[البحث عن طلبات قريبة]
  F1 --> F2[GET /services/requests/nearby]
  F2 --> F3[إحداثيات المهندس]
  F3 --> F4[نطاق البحث]
  F4 --> F5[إرجاع الطلبات المقربة]

  F --> F6[حساب المسافة في العرض]
  F6 --> F7[حفظ distanceKm في EngineerOffer]
  F7 --> F8[عرض المسافة للمهندس]
  F8 --> F9[ترتيب حسب المسافة]

  %% Performance Optimization
  G[تحسين الأداء] --> G1[فهرس 2dsphere فعال]
  G1 --> G2[حساب المسافة في الاستعلام]
  G2 --> G3[تخزين مؤقت للنتائج]
  G3 --> G4[تحديد حدود البحث]

  %% Error Handling
  H[معالجة الأخطاء] --> H1[التحقق من صحة الإحداثيات]
  H1 --> H2[معالجة الحالات الحدية]
  H2 --> H3[إرجاع خطأ للإحداثيات غير صحيحة]
  H3 --> H4[قيم افتراضية للمسافات الكبيرة]

  %% End points
  B6 --> I[نهاية حساب المسافة]
  C5 --> I
  F9 --> I
