%% Permission Control Flow
%% View at https://mermaid.live
flowchart TD
  A[طلب API محمي] --> B[فحص JWT Token]
  B --> C{Token موجود?}
  C -->|لا| D[إرجاع 401 Unauthorized]

  C -->|نعم| E[التحقق من صحة Token]
  E --> F{Token صحيح?}
  F -->|لا| D

  F -->|نعم| G[استخراج بيانات المستخدم]
  G --> H[تحميل بيانات المستخدم من DB]
  H --> I{المستخدم موجود?}
  I -->|لا| D

  I -->|نعم| J{حالة المستخدم ACTIVE?}
  J -->|لا| K[إرجاع 403 Forbidden]

  J -->|نعم| L[فحص الأدوار والصلاحيات]
  L --> M{له دور مطلوب?}
  M -->|نعم| N[السماح بالوصول]
  M -->|لا| O{له صلاحية مطلوبة?}
  O -->|نعم| N
  O -->|لا| P{دور SUPER_ADMIN?}
  P -->|نعم| N
  P -->|لا| K

  N --> Q[تنفيذ الطلب]
  Q --> R[إرجاع النتيجة]

  %% Guards Implementation
  S[JwtAuthGuard] --> S1[استخراج Token من Header]
  S1 --> S2[التحقق من صحة التوقيع]
  S2 --> S3[التحقق من انتهاء الصلاحية]

  %% Role Checks
  T[فحص الأدوار] --> T1[isAdmin() - ADMIN or SUPER_ADMIN]
  T1 --> T2[isSuperAdmin() - SUPER_ADMIN only]
  T2 --> T3[hasRole(role) - فحص دور محدد]
  T3 --> T4[hasAnyRole(roles) - فحص أي من الأدوار]

  %% Permission Checks
  U[فحص الصلاحيات] --> U1[hasPermission(permission)]
  U1 --> U2[فحص في مصفوفة permissions]

  %% Route Guards Examples
  V[أمثلة على الحماية] --> V1[@UseGuards(JwtAuthGuard)]
  V1 --> V2[للمستخدمين المسجلين فقط]
  V2 --> V3[فحص دور في Controller]
  V3 --> V4[if (!user.isAdmin()) throw Forbidden]

  %% End points
  R --> W[نهاية - نجاح]
  D --> W
  K --> W
